on:
  push:
    tags:
      - release/*
permissions:
  contents: write
jobs:
  build-frontend:
    runs-on: build
    outputs:
      artifact-name: ${{ steps.upload.outputs.artifact-name }}
    container: node:18
    defaults:
      run:
        working-directory: frontend/intranet
    steps:
      - run: apt-get update && apt-get install -y git-lfs
      - uses: actions/checkout@v4
      - run: node --version
      - run: npm --version
      - run: npm install
      - run: npm run build-prod
      - name: Upload Frontend Artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/intranet/dist

  build-backend:
    runs-on: build
    outputs:
      artifact-name: ${{ steps.upload.outputs.artifact-name }}
    container: node:18
    defaults:
      run:
        working-directory: backend
    steps:
      - run: apt-get update && apt-get install -y git-lfs
      - uses: actions/checkout@v4
      - run: node --version
      - run: npm --version
      - run: npm install
      - run: npm run build
      - name: Copy static assets into build directory
        run: mkdir js/backend/config && cp config/default.json js/backend/config
      - name: Reinstall node_modules as production run
        run: rm -r node_modules && npm install --production
      - name: Copy node_modules into build directory
        run: cp -r node_modules js/backend
      - name: Upload Backend Artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/js

  package-setup-tools:
    runs-on: build
    container: debian:latest
    steps:
      - run: apt-get update && apt-get install -y git-lfs
      - uses: actions/checkout@v4
      - name: Package utility tools and files
        run: |
          mkdir package
          cp -r setup_tools/* package/
          echo "Packaged utility setup tools."

      - uses: vimtor/action-zip@v1.2
        with:
          files: package/
          dest: setup_tools.zip

      - name: Upload Setup Package
        uses: actions/upload-artifact@v4
        with:
          name: setup-package
          path: setup_tools.zip

  package:
    runs-on: build
    needs: [build-frontend, build-backend, package-setup-tools]
    container: debian:latest
    steps:
      - run: apt-get update && apt-get install -y git-lfs
      - uses: actions/checkout@v4

      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: artifacts/frontend

      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: artifacts

      - name: Download Setup Tools Artifact
        uses: actions/download-artifact@v4
        with:
          name: setup-package
          path: artifacts

      - name: Package Application
        run: |
          mkdir package
          cp -r artifacts/* package/
          cp Dockerfile package/
          echo "Packaged application with frontend, backend and setup-tools."

      - name: Upload Final Package
        id: upload-package
        uses: actions/upload-artifact@v4
        with:
          name: full-package
          path: package

      - uses: vimtor/action-zip@v1.2
        with:
          files: package/
          dest: package.zip

      - name: upload binaries to release
        uses: softprops/action-gh-release@v1
        with:
         files: package.zip

  build-docker:
    runs-on: build
    needs: [package]
    steps:
      - name: Download final package
        uses: actions/download-artifact@v4
        with:
          name: full-package
          path: package
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/release/}" >> $GITHUB_ENV
      - name: Login to private docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY_URL }}
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASS }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: ls
        run: ls -lsa package/
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: package
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY_URL }}/vet_internal:${{ env.RELEASE_VERSION }}

  deploy:
    runs-on: deploy
    needs: [build-docker]
    steps:
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/release/}" >> $GITHUB_ENV
      - name: Cleanup
        run: rm -rf package
      - name: Login to private docker registry
        run: echo "${{ secrets.DOCKER_REGISTRY_PASS }}" | docker login ${{ secrets.DOCKER_REGISTRY_URL }} -u ${{ secrets.DOCKER_REGISTRY_USER }} --password-stdin
      - name: Pull image
        run: docker image pull ${{ secrets.DOCKER_REGISTRY_URL }}/vet_internal:${{ env.RELEASE_VERSION }}
      - name: Stop old container
        run: docker stop vet_internal || true
      - name: Delete old container (if not already gone)
        run: docker rm vet_internal || true
      - name: Run image
        run: script -q -c "docker run -d -it --name vet_internal --restart always -p 443:443 -v ~/dynamic/ssl/:/app/package/backend/ssl/certs -v ~/dynamic/config:/app/package/backend/config ${{ secrets.DOCKER_REGISTRY_URL }}/vet_internal:${{ env.RELEASE_VERSION }}"
