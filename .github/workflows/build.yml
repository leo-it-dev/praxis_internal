on: push
jobs:
  build-frontend:
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.upload.outputs.artifact-name }}
    container: node:18
    defaults:
      run:
        working-directory: frontend/intranet
    steps:
      - uses: actions/checkout@v4
      - run: node --version
      - run: npm --version
      - run: npm install
      - run: npm run build-prod
      - name: Upload Frontend Artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/intranet/dist

  build-backend:
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.upload.outputs.artifact-name }}
    container: node:18
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - run: node --version
      - run: npm --version
      - run: npm install
      - run: npm run build
      - name: Copy static assets into build directory
        run: mkdir js/backend/config && cp config/default.json js/backend/config
      - name: Reinstall node_modules as production run
        run: rm -r node_modules && npm install --production
      - name: Copy node_modules into build directory
        run: cp -r node_modules js/backend
      - name: Upload Backend Artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/js

  package-setup-tools:
    runs-on: ubuntu-latest
    steps:
      - name: Install Git LFS
        run: git lfs install
      - uses: actions/checkout@v4
        with:
          lfs: true
      - name: Package utility tools and files
        run: |
          mkdir package
          cp -r setup_tools/* package/
          echo "Packaged utility setup tools."

      - name: Upload Setup Package
        uses: actions/upload-artifact@v4
        with:
          name: setup-package
          path: package

  package:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, package-setup-tools]
    steps:
      - uses: actions/checkout@v4

      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: artifacts/frontend

      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: artifacts

      - name: Download Setup Tools Artifact
        uses: actions/download-artifact@v4
        with:
          name: setup-package
          path: artifacts

      - name: Package Application
        run: |
          mkdir package
          cp -r artifacts/* package/
          echo "Packaged application with frontend, backend and setup-tools."

      - name: Upload Final Package
        uses: actions/upload-artifact@v4
        with:
          name: full-package
          path: package
  deploy:
    runs-on: deploy
    needs: [package]
    steps:
      - name: Cleanup
        run: rm -rf package
      - name: Download final package
        uses: actions/download-artifact@v4
        with:
          name: full-package
          path: package
      - name: Link all pre-existing configuration files into our working directory.
        run: |
          find ~/dynamic/ssl/* -exec bash -c 'ln -s $(realpath {}) package/backend/ssl/$(basename "\{}")' \;
          find ~/dynamic/config/* -exec bash -c 'ln -s $(realpath {}) package/backend/config/$(basename "\{}")' \;
